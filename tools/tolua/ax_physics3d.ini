[ax_physics3d]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = ax_physics3d

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = ax

macro_judgement  = #if AX_USE_3D_PHYSICS && AX_ENABLE_BULLET_INTEGRATION

android_headers = 

android_flags = -target armv7-none-linux-androideabi -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS -DANDROID -D__ANDROID_API__=14 --sysroot=%(androidndkdir)s/platforms/android-14/arch-arm  -idirafter %(androidndkdir)s/sources/android/support/include -idirafter %(androidndkdir)s/sysroot/usr/include -idirafter %(androidndkdir)s/sysroot/usr/include/arm-linux-androideabi -idirafter %(clangllvmdir)s/lib64/clang/5.0/include -I%(androidndkdir)s/sources/cxx-stl/llvm-libc++/include

clang_headers = 
clang_flags = -nostdinc -x c++ -std=c++17 -fsigned-char -U__SSE__ -DAX__ENABLE_BULLET_INTEGRATION

win32_clang_flags = -U __SSE__

ax_headers = -I%(axdir)s/core -I%(axdir)s/core/platform/android -I%(axdir)s/thirdparty  -I%(axdir)s/thirdparty/jni.hpp/include -I%(axdir)s/thirdparty/robin-map/include -I%(axdir)s/thirdparty/bullet

ax_flags = -DANDROID

cxxgenerator_headers = 

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(ax_headers)s %(android_flags)s %(clang_flags)s %(ax_flags)s %(extra_flags)s

# what headers to parse
headers = %(axdir)s/core/physics3d/CCPhysics3D.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Physics3DWorld Physics3DShape PhysicsMeshRenderer Physics3DObject Physics3DRigidBody Physics3DShapesk Physics3DComponent Physics3DConstraint Physics3DPointToPointConstraint Physics3DHingeConstraint Physics3DSliderConstraint Physics3DConeTwistConstraint Physics3D6DofConstraint

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = Physics3DWorld::[getPhysicsObjects getPhysicsObject init rayCast sweepShape create],
       Physics3DShape::[createCompoundShape createMesh createHeightfield initConvexHull initMesh initHeightfield initCompoundShape],
       PhysicsMeshRenderer::[create],
       Physics3DComponent::[setTransformInPhysics create],
       Physics3DRigidBody::[create],
       Physics3DHingeConstraint::[setMotorTarget],
       Physics3DConeTwistConstraint::[setMotorTarget setMotorTargetInConstraintSpace],
       Physics3DObject::[setCollisionCallback]

rename_functions = 

rename_classes = 

# for all class names, should we remove something when registering in the target VM?
remove_prefix = 

# classes for which there will be no "parent" lookup
classes_have_no_parents = 

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = Physics3DObject

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no

